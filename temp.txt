

// import React, { useState } from 'react';
// import { Avatar, Box, Button, Chip, Dialog, DialogContent, DialogTitle, Divider, Fab, IconButton, TextField, Typography } from '@mui/material';
// import { Send, Close as CloseIcon, Chat as ChatIcon } from '@mui/icons-material';

// const Styles = ({
//   root: {
//     display: 'flex',
//     alignItems: 'center',
//     cursor: 'pointer',
//     '&:hover': {
//       backgroundColor: '#f5f5f5',
//     },
//   },
//   avatar: {
//     marginRight: 8,
//   },
//   chatBox: {
//     display: 'flex',
//     flexDirection: 'column',
//     justifyContent: 'space-between',
//     height: 300,
//     padding: 16,
//     borderRadius: 8,
//     boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2), 0px 5px 8px 0px rgba(0,0,0,0.14), 0px 1px 14px 0px rgba(0,0,0,0.12)',
//   },
//   chatBoxHeader: {
//     display: 'flex',
//     alignItems: 'center',
//     justifyContent: 'space-between',
//     marginBottom: 16,
//   },
//   chatBoxFooter: {
//     display: 'flex',
//     alignItems: 'center',
//     marginTop: 16,
//   },
//   input: {
//     flexGrow: 1,
//     marginRight: 8,
//   },
// });

// const ChatBox = ({ user }) => {
//   const classes = Styles();
//   const [message, setMessage] = useState('');
//   const [messages, setMessages] = useState([]);
//   const [open, setOpen] = useState(false);
//   const [selectedUsers, setSelectedUsers] = useState([]);


//   const handleInputChange = (event) => {
//     setMessage(event.target.value);
//   };

//   const handleSendMessage = () => {
//     if (message?.trim() !== '') {
//       setMessages([...messages, { sender: 'Me', message: message.trim() }]);
//       setMessage('');
//     }
//   };

//   return (
//     <Box className={classes.chatBox}>
//       <Box className={classes.chatBoxHeader}>
//         <Avatar className={classes.avatar} alt={user.name} src={user.avatarUrl} />
//         <Typography variant="h6">{user.name}</Typography>
//         {/*     <IconButton onClick={handleClose}> */}
//         <IconButton>
//           <CloseIcon />
//         </IconButton>
//       </Box>
//       <Box>
//         {messages?.map((message, index) => (
//           <Box key={index} marginBottom={2}>
//             <Typography variant="body1" component="span" fontWeight="bold">{message.sender}: </Typography>
//             <Typography variant="body1" component="span">{message.message}</Typography>
//           </Box>
//         ))}
//       </Box>
//       <Box className={classes.chatBoxFooter}>
//         <TextField className={classes.input} label="Type a message" variant="outlined" value={message} onChange={handleInputChange} />
//         <Button variant="contained" color="primary" onClick={handleSendMessage} endIcon={<Send />}>
//           Send
//         </Button>
//       </Box>
//     </Box>
//   );
// };

// const Chatroom = ({ users }) => {
//   const [open, setOpen] = useState(false);
//   const [selectedUsers, setSelectedUsers] = useState([]);
//   const [messages, setMessages] = useState([]);

//   const handleClose = () => {
//     setOpen(false);
//     setSelectedUsers([]);
//     setMessages([]);
//   };

//   const handleChatClick = () => {
//     setOpen(true);
//   };

//   const handleUserClick = (user) => {
//     setSelectedUsers((prevSelectedUsers) => {
//     if (prevSelectedUsers.includes(user)) {
//     return prevSelectedUsers.filter((selectedUser) => selectedUser !== user);
//     } else {
//     return [...prevSelectedUsers, users];
//     }
//     });
//     };
    
//     const renderUserChip = (user) => {
//     const isSelected = selectedUsers?.includes(user);
//     return (
//     <Chip
//     key={user.id}
//     label={user.name}
//     avatar={<Avatar src={user.avatarUrl} alt={user.name} />}
//     variant={isSelected ? 'default' : 'outlined'}
//     color={isSelected ? 'primary' : 'default'}
//     onClick={() => handleUserClick(user)}
//     sx={{ marginRight: 1, marginBottom: 1 }}
//     />
//     );
//     };
    
//     return (
//           <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
//             <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', padding: 2 }}>
//               {users?.map((user) => renderUserChip(user))}
//             </Box>
//           <Box sx={{ position: 'fixed', bottom: 20, right: 20 }}>
//             {selectedUsers?.length > 0 && (
//             <Fab variant="extended" onClick={() => setOpen(true)}>
//               <ChatIcon sx={{ mr: 1 }} />
//               Open Chat
//             </Fab>
//             )}
//           </Box>
//           <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
//             <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
//               <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center', p: 2 }}>
//                 {selectedUsers?.map((user) => (
//                 <Avatar key={user.id} alt={user.name} src={user.avatarUrl} sx={{ mr: 1 }} />
//               ))}
//               <Typography variant="h6" sx={{ flexGrow: 1 }}>
//                {selectedUsers.map((users) => users.name).join(', ')}
//                 </Typography>
//                 <IconButton onClick={handleClose}>
//                 <CloseIcon />
//                 </IconButton>
//                 </Box>
//                 <Divider />
//           <Box sx={{ flexGrow: 1, overflowY: 'auto', p: 2 }}>
//           {/* <ChatMessages messages={messages} /> */}
//           </Box>
//           <ChatBox user={users} />
//           </Box>
//           </Dialog>
//           </Box>
//           );
//           };
          
//           export default Chatroom;
          
    
    
    
    